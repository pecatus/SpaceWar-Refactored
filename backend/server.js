// server.js ‚Äì Express + Mongo + Socket.IO bootstrap
// =================================================================================
// T√ÑM√Ñ TIEDOSTO ON SOVELLUKSEN SYD√ÑN PALVELINPUOLELLA.
// Se on vastuussa seuraavista p√§√§teht√§vist√§:
// 1. Express-palvelimen luonti ja konfigurointi HTTP-pyynt√∂jen k√§sittelyyn.
// 2. Yhteyden muodostaminen MongoDB-tietokantaan Mongoose-kirjaston avulla.
// 3. Socket.IO-palvelimen alustus reaaliaikaista kaksisuuntaista viestint√§√§ varten.
// 4. Aktiivisten pelien hallinta GameManager-instanssien avulla.
// =================================================================================


// Ladataan ymp√§rist√∂muuttujat .env-tiedostosta.
// MIKSI: T√§m√§ mahdollistaa arkaluontoisten tietojen, kuten tietokannan
// yhteysosoitteen, pit√§misen erill√§√§n koodista.
require("dotenv").config();


// --- RIIPPUVUUDET (IMPORTS) ---
// Ladataan kaikki tarvittavat Node.js-moduulit.
const express    = require("express");        // Web-sovelluskehys HTTP-palvelimen ja reitityksen luomiseen.
const session    = require('express-session');// (Ei t√§ll√§ hetkell√§ aktiivisessa k√§yt√∂ss√§, mutta varattu sessioiden hallintaan).
const cors       = require("cors");           // Middleware, joka sallii selainten tehd√§ pyynt√∂j√§ eri alkuper√§st√§ (domainista).
const mongoose   = require("mongoose");       // ODM-kirjasto (Object Data Modeling) MongoDB:n kanssa ty√∂skentelyyn.
const http       = require("http");           // Node.js:n sis√§√§nrakennettu moduuli HTTP-palvelimen luomiseen.
const { Server } = require("socket.io");      // Socket.IO-palvelinkirjasto WebSocket-pohjaiseen reaaliaikaviestint√§√§n.

// --- SOVELLUKSEN OMAT MODUULIT ---
const GameManager = require("./gameLogic/GameManager"); // Pelilogiikan p√§√§luokka, joka hallinnoi yhden pelin tilaa.
const Game        = require("./models/Game");           // Mongoose-skeema, joka m√§√§rittelee pelin tietorakenteen tietokannassa.

// --- ALUSTUS ---
const app  = express();                       // Luodaan uusi Express-sovellusinstanssi.
const PORT = process.env.PORT || 3001;        // M√§√§ritet√§√§n portti, jossa palvelin kuuntelee. K√§ytt√§√§ .env-tiedoston porttia tai oletusta 3001.

// --- GLOBAALI TILANHALLINTA (PALVELIMEN MUISTISSA) ---

/**
 * @summary Aktiivisten pelien v√§limuisti.
 * @description MIT√Ñ: T√§m√§ Map-rakenne s√§ilytt√§√§ k√§ynniss√§ olevien pelien GameManager-instanssit.
 * Avaimena on pelin ID (`gameId`) ja arvona vastaava `GameManager`-olio.
 * MIKSI: Pit√§m√§ll√§ aktiiviset pelit palvelimen muistissa v√§ltet√§√§n jatkuvat, hitaat
 * tietokantahaut jokaista pelitapahtumaa kohden. T√§m√§ on elint√§rke√§√§ pelin suorituskyvylle.
 * @type {Map<string, GameManager>}
 */
const managers = new Map();


/**
 * @summary Ihmispelaajien socket-yhteyksien seuranta.
 * @description MIT√Ñ: T√§m√§ Map s√§il√∂√∂, mik√§ socket-yhteys kuuluu millekin ihmispelaajalle
 * kussakin peliss√§. Avaimena on pelin ID (`gameId`) ja arvona pelaajan `socket.id`.
 * MIKSI: Mahdollistaa suorien viestien l√§hett√§misen tietylle pelaajalle ja auttaa
 * tunnistamaan, kuka pelin "is√§nt√§" (host) on.
 * @type {Map<string, string>}
 */
const humanPlayerSockets = new Map();


// --- MIDDLEWARE-M√Ñ√ÑRITYKSET ---

// MIT√Ñ: Ottaa k√§ytt√∂√∂n JSON-parserin.
// MIKSI: T√§m√§ Expressin sis√§√§nrakennettu middleware j√§sent√§√§ saapuvien
// HTTP-pyynt√∂jen rungon (body) JSON-muodosta JavaScript-objektiksi,
// joka on helposti k√§sitelt√§viss√§ (esim. `req.body`).
app.use(express.json());


/* ---------------------- CORS (Cross-Origin Resource Sharing) ------------------------- */
// MIT√Ñ: M√§√§ritell√§√§n, mitk√§ ulkoiset osoitteet saavat tehd√§ pyynt√∂j√§ t√§h√§n palvelimeen.
// MIKSI: Selaimet est√§v√§t oletuksena HTTP-pyynn√∂t eri domaineihin turvallisuussyist√§.
// CORS-m√§√§ritys kertoo selaimelle, ett√§ luotamme listattuihin osoitteisiin ja sallimme
// niiden kommunikoida palvelimemme kanssa.
const WHITELIST = [
  "http://127.0.0.1:5500",    // Paikallinen kehitysymp√§rist√∂ (Live Server)
  "http://localhost:5500",    // Toinen yleinen paikallinen osoite
  "https://lassesimonen.fi",   // Tuotantoymp√§rist√∂n domain
  "https://www.lassesimonen.fi"
];

app.use(cors({
  origin: WHITELIST,          // Sallitaan pyynn√∂t vain WHITELIST-taulukossa olevista osoitteista.
  methods: ["GET", "POST", "OPTIONS"],  // Sallitaan vain tietyt HTTP-metodit.
  credentials: true           // Sallitaan ev√§steiden ja sessiotietojen l√§hett√§minen pyynt√∂jen mukana.
}));


/* ---------------------- MongoDB-YHTEYS ---------------------- */
// MIT√Ñ: Yritet√§√§n yhdist√§√§ MongoDB-tietokantaan k√§ytt√§en .env-tiedostosta l√∂ytyv√§√§ URIa.
// MIKSI: Tietokantayhteys on v√§ltt√§m√§t√∂n pelien tilan pysyv√§√§n tallentamiseen ja
// lataamiseen. `.then()` ja `.catch()` hoitavat yhteyden onnistumisen ja ep√§onnistumisen.
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log("‚úÖ  MongoDB connected"))   // Tulostetaan onnistumisviesti konsoliin.
  // Jos yhteys ep√§onnistuu, tulostetaan virhe ja sammutetaan koko prosessi.
  // T√§m√§ est√§√§ sovelluksen ajamisen ep√§vakaassa tilassa ilman tietokantaa.
  .catch(err => { console.error("‚ùå  Mongo error:", err.message); process.exit(1); });



/* ---------------------- Sessions --------------------- */
// MIT√Ñ: Otetaan k√§ytt√∂√∂n express-session -middleware.
// MIKSI: T√§m√§ middleware luo ja hallinnoi yksil√∂llisi√§ sessioita jokaiselle selaimeen
// yhdist√§v√§lle k√§ytt√§j√§lle. T√§ss√§ sovelluksessa `req.sessionID`:t√§ k√§ytet√§√§n
// luotettavana ja uniikkina tunnisteena ihmispelaajalle, kun uusi peli luodaan.
// Se varmistaa, ett√§ sama pelaaja voi jatkaa peli√§√§n ja ett√§ vanhat pelit
// voidaan siivota pois, kun sama pelaaja aloittaa uuden.
app.use(session({
  // Salainen avain, jota k√§ytet√§√§n allekirjoittamaan sessio-ID-ev√§ste.
  // Tulee AINA olla .env-tiedostossa tuotannossa turvallisuussyist√§.
  secret: process.env.SESSION_SECRET, 
  // `resave: false` est√§√§ session tallentamisen uudelleen, jos sit√§ ei ole muutettu.
  // T√§m√§ on suorituskykyoptimointi.
  resave: false,
  // `saveUninitialized: true` tallentaa uuden, mutta muuttamattoman session heti.
  // T√§m√§ on v√§ltt√§m√§t√∂nt√§, jotta `req.sessionID` on olemassa heti ensimm√§isest√§ pyynn√∂st√§ alkaen.
  saveUninitialized: true,
  cookie: { 
    secure: false, // Aseta `true` tuotannossa, jos k√§yt√§t HTTPS:√§√§.
    httpOnly: true, // Est√§√§ client-puolen JavaScripti√§ lukemasta ev√§stett√§.
    maxAge: 24 * 60 * 60 * 1000 // Ev√§steen elinik√§: 24 tuntia.
  }
}));


/* ---------------------- Socket.IO-ALUSTUS -------------------- */
// MIT√Ñ: Luodaan natiivi Node.js http-palvelin ja liitet√§√§n Socket.IO siihen.
// MIKSI: Socket.IO vaatii toimiakseen HTTP-palvelimen, johon se voi "kiinnitty√§".
// Vaikka Express luo oman HTTP-palvelimensa sis√§isesti, Socket.IO:n eksplisiittinen
// liitt√§minen antaa paremman kontrollin ja on vakiintunut k√§yt√§nt√∂.
const httpSrv = http.createServer(app);
// Luodaan uusi Socket.IO-palvelininstanssi ja liitet√§√§n se HTTP-palvelimeen.
const io = new Server(httpSrv, {
  // Socket.IO tarvitsee oman CORS-m√§√§rityksens√§, koska se tekee aluksi
  // HTTP-pyynt√∂j√§ (polling) ennen mahdolliseen WebSocket-yhteyteen siirtymist√§.
  cors: {
    origin: WHITELIST,     // Sallitut alkuper√§t, sama kuin Expressill√§.
    methods: ["GET", "POST"]
  }
});


/* ---- Socket-tapahtumat ------------------------------ */
// MIT√Ñ: T√§m√§ lohko m√§√§rittelee, miten palvelin reagoi saapuviin reaaliaikaisiin
// viesteihin client-selaimilta. "connection"-tapahtuma on p√§√§sis√§√§nk√§ynti,
// ja sen sis√§ll√§ m√§√§ritell√§√§n kuuntelijat kaikille muille pelin aikana
// l√§hetett√§ville viesteille (esim. "join_game", "player_command").
io.on("connection", socket => {
  // Jokainen uusi selainyhteys saa uniikin socket.id:n.
  console.log("üîå  Client connected", socket.id);
  

  /**
   * KUUNTELIJA: 'join_game'
   * MIT√Ñ: Liitt√§√§ clientin socketin tiettyyn pelihuoneeseen (`gameId`).
   * MIKSI: T√§m√§ on kriittinen vaihe, jossa client "astuu sis√§√§n" peliin.
   * 1.  Varmistaa, ett√§ peli on olemassa ja aktiivinen (`managers.get(gameId)`).
   * 2.  Tallentaa ihmispelaajan socket-yhteyden (`humanPlayerSockets`), jotta tiedet√§√§n,
   * kuka pelin "is√§nt√§" on ja kenen yhteyden katkeaminen p√§√§tt√§√§ pelin.
   * 3.  Liitt√§√§ socketin Socket.IO-huoneeseen, mik√§ mahdollistaa tehokkaan
   * viestinv√§lityksen vain t√§m√§n pelin pelaajille.
   * 4.  K√§ynnist√§√§ pelisilmukan (`gm.start()`), jos se ei ole jo k√§ynniss√§.
   */
  socket.on("join_game", async ({ gameId }) => {
    try {
      // Validoi, ett√§ annettu gameId on kelvollinen MongoDB ObjectId.
      if (!mongoose.Types.ObjectId.isValid(gameId)) {
        throw new Error("Invalid gameId provided to join_game.");
      }

      // Varmista, ett√§ pelille on olemassa aktiivinen GameManager muistissa.
      const gm = managers.get(gameId);
      if (!gm) {
        throw new Error("Game manager not found. Cannot join.");
      }

      // Tallenna t√§m√§n ihmispelaajan socket-yhteys.
      humanPlayerSockets.set(gameId, socket.id);

      // Liit√§ socket huoneeseen.
      socket.join(gameId);
      console.log(`üë•  Socket ${socket.id} successfully joined room ${gameId}`);

      // Jos pelisilmukka ei ole k√§ynniss√§, k√§ynnist√§ se nyt kun pelaaja on liittynyt.
      if (!gm.isRunning() && !gm.isPaused()) {
        console.log(`üöÄ Starting game ${gameId} tick loop as player has joined.`);
        gm.start();
      }
      // L√§het√§ onnistumisvahvistus takaisin clientille.
      socket.emit("joined", { success: true });

    } catch (err) {
      console.error(`‚ùå Error during join_game:`, err.message);
      socket.emit("joined", { success: false, error: err.message });
    }
  });


  /**
   * KUUNTELIJA: 'disconnecting'
   * MIT√Ñ: Suorittaa siivoustoimenpiteet, kun ihmispelaajan yhteys katkeaa.
   * MIKSI: T√§m√§ on elint√§rke√§√§ palvelimen resurssienhallinnalle. Jos ihmispelaaja
   * poistuu, peli ei voi jatkua. T√§m√§ logiikka pys√§ytt√§√§ GameManager-instanssin,
   * poistaa sen muistista (`managers.delete`), siivoaa socket-viittaukset ja
   * merkitsee pelin tietokannassa keskeytetyksi (`aborted`). T√§m√§ est√§√§
   * "zombie-pelien" j√§√§misen py√∂rim√§√§n palvelimelle. `disconnecting`-event on
   * parempi kuin `disconnect`, koska se antaa p√§√§syn huoneisiin, joissa socket oli,
   * ennen kuin se automaattisesti poistetaan niist√§.
   */
  socket.on("disconnecting", async () => {
    console.log(`‚ö°Ô∏è Client disconnected: ${socket.id}`);

    // Etsi, oliko poistuva socket ihmispelaajan socket jossakin peliss√§.
    for (const [gameId, humanSocketId] of humanPlayerSockets.entries()) {
      // Tarkista onko t√§m√§ human player
      if (humanSocketId === socket.id) {
        console.log(`   - Human player disconnected from game ${gameId}. Stopping game.`);
        
        const gm = managers.get(gameId);
        if (gm) {
          // Pys√§yt√§ pelisilmukka ja poista peli aktiivisten pelien listalta.
          gm.stop();
          managers.delete(gameId);
          humanPlayerSockets.delete(gameId);
          
          // Poista kaikki socketit huoneesta
          const socketsInRoom = await io.in(gameId).fetchSockets();
          for (const s of socketsInRoom) {
            s.leave(gameId);
          }
          console.log(`   - Game ${gameId} stopped and all sockets removed from room.`);

          // Merkitse peli p√§√§ttyneeksi tietokannassa.
          Game.findByIdAndUpdate(gameId, {
            status: 'aborted',
            finishedAt: new Date()
          })
          .exec()
          .then(updatedGame => {
            if (updatedGame) {
              console.log(`   - Game ${gameId} marked as 'aborted' in database.`);
            }
          })
          .catch(err => {
            console.error(`   - Error updating game status:`, err);
          });
        }
      }
    }
  });


  /**
   * KUUNTELIJA: 'player_command'
   * MIT√Ñ: Vastaanottaa ja k√§sittelee kaikki pelaajan pelin aikana tekem√§t komennot.
   * MIKSI: T√§m√§ on keskitetty reitti, jonka kautta client vaikuttaa pelin tilaan.
   * Se etsii oikean GameManager-instanssin ja v√§litt√§√§ komennon sille
   * `_applyActions`-metodin kautta, joka toimii auktoriteettina ja suorittaa
   * varsinaisen pelilogiikan (esim. resurssien v√§hennys, jonoon lis√§√§minen).
   */
  socket.on("player_command", async (command) => {
    try {
      const gameId = command.gameId; 
      if (!gameId) {
        console.error("‚ùå No active game found for socket", socket.id);
        return;
      }
      
      const gm = managers.get(gameId);
      if (!gm) {
        console.error("‚ùå Game manager not found for", gameId);
        return;
      }
      
      // V√§lit√§ komento GameManagerille suoritettavaksi.
      await gm._applyActions([command]);
      
    } catch (err) {
      console.error("‚ùå Error processing player command:", err);
      socket.emit("command_error", { error: err.message });
    }
  });


    /**
   * KUUNTELIJA: 'set_game_speed', 'pause_game', 'resume_game'
   * MIT√Ñ: K√§sittelee pelin metatason kontrolleja, kuten nopeutta ja pausetusta.
   * MIKSI: Antaa pelaajalle kontrollin pelin kulkuun. N√§m√§ komennot eiv√§t muuta
   * pelin tilaa suoraan, vaan kutsuvat GameManagerin metodeja (`setSpeed`, `pause`,
   * `resume`), jotka hallinnoivat pelisilmukan ajoitusta.
   */
  socket.on("set_game_speed", async ({ gameId, speed }) => {
      try {
          const gm = managers.get(gameId);
          if (gm) {
              console.log(`‚ö° Setting game ${gameId} speed to ${speed}x`);
              gm.setSpeed(speed);
          }
      } catch (err) {
          console.error("‚ùå Error setting game speed:", err);
      }
  });

  socket.on("pause_game", async ({ gameId }) => {
      try {
          const gm = managers.get(gameId);
          if (gm && gm.isRunning()) {
              console.log(`‚è∏Ô∏è Pausing game ${gameId} by player request`);
              gm.pause();
          }
      } catch (err) {
          console.error("‚ùå Error pausing game:", err);
      }
  });

  socket.on("resume_game", async ({ gameId }) => {
      try {
          const gm = managers.get(gameId);
          if (gm && gm.isPaused()) {
              console.log(`‚ñ∂Ô∏è Resuming game ${gameId} by player request`);
              gm.resume();
          }
      } catch (err) {
          console.error("‚ùå Error resuming game:", err);
      }
  });

  /**
   * ----- EI TOIMI ODOTETUSTI: RENDER.com vaatii maksullisen instanssin,
   * jotta palvelin pysyy pystyss√§ yli 15 minuuttia. T√§m√§ EI korjannut tilannetta
   * REAALIAIKAINEN ENDPOINT: '/api/keep-alive'
   * MIT√Ñ: Yksinkertainen HTTP-reitti, joka vastaa "olen elossa" -viestill√§.
   * MIKSI: Ilmaiset Render.com-instanssit "nukahtavat" 15 minuutin k√§ytt√§m√§tt√∂myyden
   * j√§lkeen. Vaikka Socket.IO-yhteys on auki, Render ei v√§ltt√§m√§tt√§ tulkitse sit√§
   * HTTP-aktiivisuudeksi. Client l√§hett√§√§ s√§√§nn√∂llisesti pyynn√∂n t√§h√§n reittiin
   * est√§√§kseen palvelimen nukahtamisen kesken pelin.
   */
  app.use(cors({
    origin: WHITELIST,
    methods: ["GET", "POST", "OPTIONS"],
    credentials: true
  }));

  // Keep-alive-reitti est√§m√§√§n Renderin nukahtamisen
  app.get('/api/keep-alive', (req, res) => {
    res.status(200).send({ status: 'alive' });
  });

});


/* ---------------------- REST API --------------------- */

/**
 * ENDPOINT: POST /api/games/new
 * MIT√Ñ: Luo t√§ysin uuden pelisession ja palauttaa sen alkutilan.
 * MIKSI: T√§m√§ on ainoa reitti, jonka kautta pelaaja voi aloittaa uuden pelin.
 * Se on vastuussa koko prosessista alusta loppuun.
 *
 * T√ÑRKE√Ñ LOGIIKKA:
 * 1.  VANHOJEN PELIEN SIIVOUS: Ennen uuden pelin luontia, endpoint etsii ja
 * tuhoaa kaikki saman pelaajan (saman session ID:n) aiemmat, mahdollisesti
 * kesken j√§√§neet pelit. T√§m√§ on kriittist√§ resurssien vapauttamiseksi:
 * se pys√§ytt√§√§ vanhat pelisilmukat, poistaa GameManagerit muistista ja
 * merkitsee vanhat pelit tietokantaan hyl√§tyiksi.
 * 2.  UUDEN PELIN LUONTI: Luo uuden GameManager-instanssin ja kutsuu sen
 * `createWorld`-metodia, joka generoi proseduraalisesti koko pelimaailman
 * (pelaajat, t√§hdet, yhteydet).
 * 3.  RESURSSIEN HALLINTA: Tallentaa juuri luodun GameManager-instanssin
 * palvelimen muistissa olevaan `managers`-v√§limuistiin, jotta pelitapahtumia
 * voidaan k√§sitell√§ nopeasti ilman jatkuvia tietokantahakuja.
 * 4.  VASTAUS CLIENTILLE: Palauttaa HTTP 201 -vastauksena koko pelin alkutilan
 * (initialState), jonka client k√§ytt√§√§ 3D-maailman rakentamiseen.
 */
app.post("/api/games/new", async (req, res) => {
  try {
    // K√§ytet√§√§n express-sessionin luomaa uniikkia ID:t√§ pelaajan tunnistamiseen.
    const playerId = req.sessionID; 

    // --- VAIHE 1: Siivoa vanhat, kesken j√§√§neet pelit ---
    // Etsi kaikki t√§m√§n session ID:n omistamat pelit, jotka ovat viel√§ "playing" tai "lobby" -tilassa.
    const existingGames = await Game.find({ 
      status: { $in: ["playing", "lobby"] },
      "settings.playerId": playerId
    }).exec();

    if (existingGames.length > 0) {
      console.log(`üîÑ Found ${existingGames.length} old game(s) for player ${playerId.slice(-6)}. Cleaning up...`);
      
      // K√§yd√§√§n l√§pi ja tuhotaan kaikki vanhat pelit.
      for (const game of existingGames) {
        const oldGameId = game._id.toString();
        
        // Pys√§yt√§ ja poista muistissa oleva GameManager, jos sellainen on.
        const oldGm = managers.get(oldGameId);
        if (oldGm) {
          console.log(`   - Stopping game ${oldGameId}`);
          oldGm.stop();                           // Pys√§ytt√§√§ pelisilmukan.
          oldGm.removeAllListeners();             // Poistaa event listenerit (esim. 'abandoned').
          managers.delete(oldGameId);
        }
        
        // Poista pelaajan socket-viittaus
        humanPlayerSockets.delete(oldGameId);
        
        // Varmista, ett√§ kaikki socketit poistetaan vanhasta pelihuoneesta.
        try {
          const socketsInOldRoom = await io.in(oldGameId).fetchSockets();
          for (const s of socketsInOldRoom) {
            s.leave(oldGameId);
          }
          console.log(`   - Removed ${socketsInOldRoom.length} sockets from room ${oldGameId}`);
        } catch (err) {
          console.error(`   - Error removing sockets from room:`, err);
        }
        
        // Merkitse peli tietokannassa keskeytetyksi.
        game.status = 'aborted';
        game.finishedAt = new Date();
        await game.save();
        console.log(`   - Game ${oldGameId} marked as aborted`);
      }
    }
    // --- SIIVOUS P√Ñ√ÑTTYY ---

    // --- VAIHE 2: Luo uusi peli ---
    console.log(`‚ú® Creating new game for player ${playerId.slice(-6)}.`);
    
    // Ker√§t√§√§n pelin asetukset clientin l√§hett√§m√§st√§ pyynn√∂st√§ (req.body).
    const gameConfig = {
      humanName: req.body.playerName || "Player",
      humanColor: req.body.playerColor || "#007bff",
      numAiPlayers: req.body.numAiPlayers|| 1,
      aiColors: req.body.aiColors || ["#dc3545", "#28a745", "#ffc107", "#17a2b8"],
      starCount: req.body.starCount || 120,
      playerId: playerId,                   // T√§rke√§: liitet√§√§n session ID peliin.
      lobbyHost: "server",
      speed: req.body.speed || 1
    };

    // Luo uusi GameManager ja sen sis√§ll√§ koko pelimaailma.
    const gm = new GameManager({ io });
    const result = await gm.createWorld(gameConfig);
    const newGameId = result.initialState.gameId;

    // Asetetaan kuuntelija 'abandoned'-tapahtumalle. T√§m√§ laukeaa, jos peli
    // luodaan, mutta kukaan ei liity siihen tietyn ajan kuluessa.
    gm.on('abandoned', async (abandonedGameId) => {
      console.log(`üóëÔ∏è  Game ${abandonedGameId} abandoned - cleaning up`);
      
      // Suoritetaan siivouslogiikka.
      managers.delete(abandonedGameId);
      humanPlayerSockets.delete(abandonedGameId);
      
      // Varmista ett√§ kaikki socketit poistetaan huoneesta
      try {
        const remainingSockets = await io.in(abandonedGameId).fetchSockets();
        for (const s of remainingSockets) {
          s.leave(abandonedGameId);
        }
      } catch (err) {
        console.error('Error removing sockets on abandonment:', err);
      }
      
      // Merkitse peli p√§√§ttyneeksi tietokannassa
      Game.findByIdAndUpdate(abandonedGameId, {
        status: 'abandoned',
        finishedAt: new Date()
      }).exec().catch(err => {
        console.error('Error marking game as abandoned:', err);
      });
    });

    // Tallennetaan uusi, aktiivinen GameManager muistiin nopeaa k√§ytt√∂√§ varten.
    managers.set(newGameId.toString(), gm);
    
    console.log(`‚úÖ New game ${newGameId} created successfully`);

    // Palautetaan koko pelin alkutila clientille, joka rakentaa sen perusteella n√§kym√§n.
    res.status(201).json(result);
    
  } catch (err) {
    console.error("‚ùå Error in /api/games/new:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});


/* ---- Cleanup scheduled job ---- */

/**
 * AJASTETTU TEHT√ÑV√Ñ: Siivoaa tietokannasta vanhat ja hyl√§tyt pelit ja kaiken niihin liittyv√§n datan.
 * MIT√Ñ: T√§m√§ `setInterval`-funktio suoritetaan automaattisesti 10 minuutin v√§lein.
 * Se etsii kaikki yli 24 tuntia vanhat pelit ja poistaa ne sek√§ kaikki niihin
 * viittaavat Player-, Star- ja Ship-dokumentit.
 * MIKSI: T√§m√§ on keskitetty ja luotettava tapa pit√§√§ tietokanta siistin√§ ja
 * est√§√§ "orpojen" dokumenttien kertyminen. Se takaa datan eheyden paremmin
 * kuin yksitt√§iset TTL-indeksit.
 */
setInterval(async () => {
  try {
    const cutoffTime = new Date(Date.now() - 24 * 60 * 60 * 1000); // 24h vanha
    
    // 1. Etsi kaikki pelit, jotka ovat yli 24h vanhoja.
    // Haetaan vain ID:t, koska emme tarvitse muuta dataa, mik√§ tekee kyselyst√§ tehokkaamman.
    const oldGames = await Game.find({
        createdAt: { $lt: cutoffTime }
    }).select('_id').lean();

    if (oldGames.length > 0) {
        const gameIdsToDelete = oldGames.map(g => g._id);
        console.log(`üßπ Found ${gameIdsToDelete.length} old game(s) to clean up.`);

        // 2. Rakenna lupaukset kaikkien peliin liittyvien dokumenttien poistamiseksi.
        const playerPromise = Player.deleteMany({ gameId: { $in: gameIdsToDelete } });
        const starPromise = Star.deleteMany({ gameId: { $in: gameIdsToDelete } });
        const shipPromise = Ship.deleteMany({ gameId: { $in: gameIdsToDelete } });

        // 3. Poista itse Game-dokumentit.
        const gamePromise = Game.deleteMany({ _id: { $in: gameIdsToDelete } });

        // Aja kaikki poistot rinnakkain ja odota niiden valmistumista.
        const [playerResult, starResult, shipResult, gameResult] = await Promise.all([
            playerPromise,
            starPromise,
            shipPromise,
            gamePromise
        ]);

        console.log(`   - Deleted: ${gameResult.deletedCount} games, ${playerResult.deletedCount} players, ${starResult.deletedCount} stars, ${shipResult.deletedCount} ships.`);
    }

  } catch (err) {
    console.error('Cleanup error:', err);
  }
}, 10 * 60 * 1000); // Suoritetaan 10 minuutin v√§lein.



/* ---------------------------------------------------- */
/**
 * K√ÑYNNISTYS: K√§ynnist√§√§ HTTP-palvelimen kuuntelemaan pyynt√∂j√§.
 * MIT√Ñ: T√§m√§ on tiedoston viimeinen ja yksi t√§rkeimmist√§ komennoista. Se sitoo
 * luodun http-palvelimen (johon my√∂s Socket.IO on liitetty) m√§√§riteltyyn
 * porttiin ja alkaa hyv√§ksy√§ saapuvia yhteyksi√§.
 * MIKSI: Ilman t√§t√§ kutsua palvelin ei koskaan k√§ynnistyisi eik√§ olisi
 * saavutettavissa internetist√§ tai paikallisverkosta.
 */
httpSrv.listen(PORT, () => console.log(`üöÄ  Server running on :${PORT}`));